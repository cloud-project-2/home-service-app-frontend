{"ast":null,"code":"var _jsxFileName = \"/Users/bawantharathnayake/Desktop/Academic/semester 7/cloud/cloud-project/home-service-app-frontend/src/components/BackendIntegration.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { API_CONFIG, getApiUrl } from '../config';\n\n// Backend Integration Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BackendIntegration() {\n  _s();\n  const [backendStatus, setBackendStatus] = useState('checking');\n  const [backendUrl, setBackendUrl] = useState(API_CONFIG.BASE_URL);\n\n  // Check backend connectivity\n  useEffect(() => {\n    checkBackendHealth();\n  }, []);\n  const checkBackendHealth = async () => {\n    try {\n      const response = await fetch(getApiUrl('/health'), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        setBackendStatus('connected');\n      } else {\n        setBackendStatus('error');\n      }\n    } catch (error) {\n      console.error('Backend connection error:', error);\n      setBackendStatus('error');\n    }\n  };\n  const getStatusColor = () => {\n    switch (backendStatus) {\n      case 'connected':\n        return 'text-green-600 bg-green-100';\n      case 'error':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-yellow-600 bg-yellow-100';\n    }\n  };\n  const getStatusText = () => {\n    switch (backendStatus) {\n      case 'connected':\n        return 'Backend Connected';\n      case 'error':\n        return 'Backend Error';\n      default:\n        return 'Checking Backend...';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed bottom-4 right-4 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `px-4 py-2 rounded-lg shadow-lg border ${getStatusColor()}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `w-2 h-2 rounded-full ${backendStatus === 'connected' ? 'bg-green-500' : backendStatus === 'error' ? 'bg-red-500' : 'bg-yellow-500'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm font-medium\",\n          children: getStatusText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xs mt-1 opacity-75\",\n        children: backendUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n// Backend Service Hook\n_s(BackendIntegration, \"+QVnLWEApd0MTGPofcdfYx1K4v8=\");\n_c = BackendIntegration;\nexport const useBackendService = () => {\n  _s2();\n  const [isConnected, setIsConnected] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    checkConnection();\n  }, []);\n  const checkConnection = async () => {\n    try {\n      const response = await fetch(getApiUrl('/health'));\n      setIsConnected(response.ok);\n    } catch (error) {\n      setIsConnected(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const makeRequest = async (endpoint, options = {}) => {\n    const url = getApiUrl(endpoint);\n    const defaultOptions = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    };\n    try {\n      const response = await fetch(url, {\n        ...defaultOptions,\n        ...options\n      });\n      return response;\n    } catch (error) {\n      console.error('Backend request failed:', error);\n      throw error;\n    }\n  };\n  return {\n    isConnected,\n    loading,\n    makeRequest,\n    checkConnection\n  };\n};\n_s2(useBackendService, \"uCZc9mJ0RWsYqRKUGyHj/GTqOsw=\");\nvar _c;\n$RefreshReg$(_c, \"BackendIntegration\");","map":{"version":3,"names":["React","useState","useEffect","API_CONFIG","getApiUrl","jsxDEV","_jsxDEV","BackendIntegration","_s","backendStatus","setBackendStatus","backendUrl","setBackendUrl","BASE_URL","checkBackendHealth","response","fetch","method","headers","ok","error","console","getStatusColor","getStatusText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBackendService","_s2","isConnected","setIsConnected","loading","setLoading","checkConnection","makeRequest","endpoint","options","url","defaultOptions","$RefreshReg$"],"sources":["/Users/bawantharathnayake/Desktop/Academic/semester 7/cloud/cloud-project/home-service-app-frontend/src/components/BackendIntegration.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_CONFIG, getApiUrl } from '../config';\n\n// Backend Integration Component\nexport default function BackendIntegration() {\n  const [backendStatus, setBackendStatus] = useState('checking');\n  const [backendUrl, setBackendUrl] = useState(API_CONFIG.BASE_URL);\n\n  // Check backend connectivity\n  useEffect(() => {\n    checkBackendHealth();\n  }, []);\n\n  const checkBackendHealth = async () => {\n    try {\n      const response = await fetch(getApiUrl('/health'), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (response.ok) {\n        setBackendStatus('connected');\n      } else {\n        setBackendStatus('error');\n      }\n    } catch (error) {\n      console.error('Backend connection error:', error);\n      setBackendStatus('error');\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (backendStatus) {\n      case 'connected':\n        return 'text-green-600 bg-green-100';\n      case 'error':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-yellow-600 bg-yellow-100';\n    }\n  };\n\n  const getStatusText = () => {\n    switch (backendStatus) {\n      case 'connected':\n        return 'Backend Connected';\n      case 'error':\n        return 'Backend Error';\n      default:\n        return 'Checking Backend...';\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      <div className={`px-4 py-2 rounded-lg shadow-lg border ${getStatusColor()}`}>\n        <div className=\"flex items-center gap-2\">\n          <div className={`w-2 h-2 rounded-full ${\n            backendStatus === 'connected' ? 'bg-green-500' : \n            backendStatus === 'error' ? 'bg-red-500' : 'bg-yellow-500'\n          }`}></div>\n          <span className=\"text-sm font-medium\">{getStatusText()}</span>\n        </div>\n        <div className=\"text-xs mt-1 opacity-75\">\n          {backendUrl}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Backend Service Hook\nexport const useBackendService = () => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkConnection();\n  }, []);\n\n  const checkConnection = async () => {\n    try {\n      const response = await fetch(getApiUrl('/health'));\n      setIsConnected(response.ok);\n    } catch (error) {\n      setIsConnected(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const makeRequest = async (endpoint, options = {}) => {\n    const url = getApiUrl(endpoint);\n    const defaultOptions = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    };\n\n    try {\n      const response = await fetch(url, { ...defaultOptions, ...options });\n      return response;\n    } catch (error) {\n      console.error('Backend request failed:', error);\n      throw error;\n    }\n  };\n\n  return {\n    isConnected,\n    loading,\n    makeRequest,\n    checkConnection,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}